
PWMFanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004fb  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000477  00000000  00000000  00000693  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00000b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00001085  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__vector_8>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	33 d0       	rcall	.+102    	; 0x92 <main>
  2c:	36 c0       	rjmp	.+108    	; 0x9a <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <__vector_8>:
	sei();												// Enable global interrupts
    while (1);											// PWM is driven by ADC interrupt
}

ISR(ADC_vect)											// Interrupt on ADC conversion complete
{
  30:	1f 92       	push	r1
  32:	0f 92       	push	r0
  34:	0f b6       	in	r0, 0x3f	; 63
  36:	0f 92       	push	r0
  38:	11 24       	eor	r1, r1
  3a:	8f 93       	push	r24
	OCR0A = ~ADCH;										// Set PWM duty cycle to 8 bits ADC value
  3c:	85 b1       	in	r24, 0x05	; 5
  3e:	80 95       	com	r24
  40:	89 bd       	out	0x29, r24	; 41
	ADCSRA |= (1<<ADSC);								// Start another ADC conversion
  42:	36 9a       	sbi	0x06, 6	; 6
}
  44:	8f 91       	pop	r24
  46:	0f 90       	pop	r0
  48:	0f be       	out	0x3f, r0	; 63
  4a:	0f 90       	pop	r0
  4c:	1f 90       	pop	r1
  4e:	18 95       	reti

00000050 <init_PWM>:

void init_PWM()
{
	DDRB   |= (1<<PB0);									// PB0 as output
  50:	b8 9a       	sbi	0x17, 0	; 23
	
	TCCR0A |= (1<<WGM01) | (1<<WGM00);					// ... Fast PWM mode
  52:	8a b5       	in	r24, 0x2a	; 42
  54:	83 60       	ori	r24, 0x03	; 3
  56:	8a bd       	out	0x2a, r24	; 42
		
	TCCR0A |= (1<<COM0A1);								// ...
  58:	8a b5       	in	r24, 0x2a	; 42
  5a:	80 68       	ori	r24, 0x80	; 128
  5c:	8a bd       	out	0x2a, r24	; 42
	TCCR0A &= ~(1<<COM0A0);								// ... Non-inverting mode
  5e:	8a b5       	in	r24, 0x2a	; 42
  60:	8f 7b       	andi	r24, 0xBF	; 191
  62:	8a bd       	out	0x2a, r24	; 42
	
	TCCR0B &= ~((1<<CS02) | (1<<CS01));					// ...
  64:	83 b7       	in	r24, 0x33	; 51
  66:	89 7f       	andi	r24, 0xF9	; 249
  68:	83 bf       	out	0x33, r24	; 51
	TCCR0B |= (1<<CS00);								// ... No prescaler
  6a:	83 b7       	in	r24, 0x33	; 51
  6c:	81 60       	ori	r24, 0x01	; 1
  6e:	83 bf       	out	0x33, r24	; 51
  70:	08 95       	ret

00000072 <init_ADC>:
}

void init_ADC()
{
	ADMUX &= ~((0<<REFS1) | (1<<REFS0));				// VCC used as Voltage Reference
  72:	3e 98       	cbi	0x07, 6	; 7
	ADMUX |= (1<<ADLAR);								// ADC Left Adjust Result
  74:	3d 9a       	sbi	0x07, 5	; 7
	ADMUX &= ~((1<<MUX3) | (1<<MUX2));					// ...
  76:	87 b1       	in	r24, 0x07	; 7
  78:	83 7f       	andi	r24, 0xF3	; 243
  7a:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX1) | (1<<MUX0);						// ... Select ADC3
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	83 60       	ori	r24, 0x03	; 3
  80:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	    // ADC clock prescaler /128
  82:	86 b1       	in	r24, 0x06	; 6
  84:	87 60       	ori	r24, 0x07	; 7
  86:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADIE) | (1<<ADEN);					// Enable ADC and enable interrupt
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	88 68       	ori	r24, 0x88	; 136
  8c:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);								// Start ADC conversion
  8e:	36 9a       	sbi	0x06, 6	; 6
  90:	08 95       	ret

00000092 <main>:
void init_PWM();
void init_ADC();

int main(void)
{
	init_PWM();											// Initialize non inverting Fast PWM mode on OC0A
  92:	de df       	rcall	.-68     	; 0x50 <init_PWM>
	init_ADC();											// Initialize ADC on ADC3
  94:	ee df       	rcall	.-36     	; 0x72 <init_ADC>
	
	sei();												// Enable global interrupts
  96:	78 94       	sei
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x6>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
